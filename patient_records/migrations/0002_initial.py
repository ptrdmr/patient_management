# Generated by Django 4.2.19 on 2025-02-11 17:37

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('patient_records', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Adls',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='manual', help_text='Source system or method of data entry', max_length=100)),
                ('date', models.DateField(help_text='Date of the record')),
                ('ambulation', models.CharField(help_text="Patient's ability to walk/move around", max_length=100)),
                ('continence', models.CharField(help_text="Patient's bladder/bowel control", max_length=100)),
                ('transfer', models.CharField(help_text="Patient's ability to transfer between surfaces", max_length=100)),
                ('toileting', models.CharField(blank=True, help_text="Patient's ability to use toilet", max_length=100, null=True)),
                ('transferring', models.CharField(blank=True, help_text="Patient's ability to transfer", max_length=100, null=True)),
                ('dressing', models.CharField(help_text="Patient's ability to dress themselves", max_length=100)),
                ('feeding', models.CharField(help_text="Patient's ability to feed themselves", max_length=100)),
                ('bathing', models.CharField(help_text="Patient's ability to bathe themselves", max_length=100)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about ADLs')),
            ],
            options={
                'verbose_name': 'ADL',
                'verbose_name_plural': 'ADLs',
                'ordering': ['-date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AuditTrail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient_identifier', models.CharField(default='Unknown Patient', max_length=100)),
                ('action', models.CharField(choices=[('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete')], max_length=10)),
                ('record_type', models.CharField(max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('previous_values', models.JSONField(default=dict)),
                ('new_values', models.JSONField(default=dict)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='CbcLabs',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='manual', help_text='Source system or method of data entry', max_length=100)),
                ('date', models.DateField(help_text='Date of the record')),
                ('rbc', models.DecimalField(decimal_places=2, max_digits=5)),
                ('wbc', models.DecimalField(decimal_places=2, max_digits=5)),
                ('hemoglobin', models.DecimalField(decimal_places=2, max_digits=5)),
                ('hematocrit', models.DecimalField(decimal_places=2, max_digits=5)),
                ('mcv', models.DecimalField(decimal_places=2, max_digits=5)),
                ('mchc', models.DecimalField(decimal_places=2, max_digits=5)),
                ('rdw', models.DecimalField(decimal_places=2, max_digits=5)),
                ('platelets', models.DecimalField(decimal_places=2, max_digits=7)),
                ('mch', models.DecimalField(decimal_places=2, max_digits=5)),
                ('neutrophils', models.DecimalField(decimal_places=2, max_digits=5)),
                ('lymphocytes', models.DecimalField(decimal_places=2, max_digits=5)),
                ('monocytes', models.DecimalField(decimal_places=2, max_digits=5)),
                ('eosinophils', models.DecimalField(decimal_places=2, max_digits=5)),
                ('basophils', models.DecimalField(decimal_places=2, max_digits=5)),
            ],
            options={
                'verbose_name': 'CBC Lab',
                'verbose_name_plural': 'CBC Labs',
                'ordering': ['-date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClinicalNote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(help_text='Date of the record')),
                ('content', models.TextField(help_text='Clinical note content')),
                ('source', models.CharField(default='manual', help_text='Source of the note', max_length=100)),
            ],
            options={
                'ordering': ['-date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClinicalReadModel',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('schema_version', models.CharField(default='1.0', max_length=10)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('patient_id', models.UUIDField(help_text='ID of the patient this data belongs to')),
                ('event_type', models.CharField(help_text='Type of clinical event', max_length=100)),
                ('data', models.JSONField(help_text='Clinical event data')),
                ('recorded_at', models.DateTimeField(help_text='When the event was recorded')),
                ('symptoms_summary', models.JSONField(help_text='Latest symptoms data', null=True)),
                ('provider_details', models.JSONField(help_text='Provider information', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CmpLabs',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='manual', help_text='Source system or method of data entry', max_length=100)),
                ('date', models.DateField(help_text='Date of the record')),
                ('sodium', models.DecimalField(decimal_places=2, max_digits=5)),
                ('potassium', models.DecimalField(decimal_places=2, max_digits=5)),
                ('chloride', models.DecimalField(decimal_places=2, max_digits=5)),
                ('co2', models.DecimalField(decimal_places=2, max_digits=5)),
                ('glucose', models.DecimalField(decimal_places=2, max_digits=5)),
                ('bun', models.DecimalField(decimal_places=2, max_digits=5)),
                ('creatinine', models.DecimalField(decimal_places=2, max_digits=5)),
                ('calcium', models.DecimalField(decimal_places=2, max_digits=5)),
                ('protein', models.DecimalField(decimal_places=2, max_digits=5)),
                ('albumin', models.DecimalField(decimal_places=2, max_digits=5)),
                ('bilirubin', models.DecimalField(decimal_places=2, max_digits=5)),
                ('gfr', models.DecimalField(decimal_places=2, max_digits=5)),
            ],
            options={
                'verbose_name': 'CMP Lab',
                'verbose_name_plural': 'CMP Labs',
                'ordering': ['-date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='manual', help_text='Source system or method of data entry', max_length=100)),
                ('date', models.DateField(help_text='Date of the record')),
                ('icd_code', models.CharField(help_text='ICD-10 code', max_length=10)),
                ('diagnosis', models.CharField(help_text='Diagnosis description', max_length=255)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the diagnosis')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this diagnosis is currently active')),
                ('resolved_date', models.DateField(blank=True, help_text='Date when the diagnosis was resolved', null=True)),
            ],
            options={
                'verbose_name_plural': 'diagnoses',
            },
        ),
        migrations.CreateModel(
            name='EventStore',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('aggregate_type', models.CharField(help_text='Type of aggregate (e.g., PATIENT, CLINICAL)', max_length=100)),
                ('aggregate_id', models.CharField(help_text='ID of the aggregate', max_length=100)),
                ('event_type', models.CharField(help_text='Type of event', max_length=100)),
                ('event_data', models.JSONField(help_text='Event payload data')),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata about the event')),
                ('sequence', models.BigIntegerField(db_index=True, help_text='Event sequence number')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the event occurred')),
            ],
            options={
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='Imaging',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='manual', help_text='Source system or method of data entry', max_length=100)),
                ('date', models.DateField(help_text='Date of the record')),
                ('type', models.CharField(help_text='Type of imaging study', max_length=100)),
                ('body_part', models.CharField(blank=True, help_text='Body part imaged', max_length=100, null=True)),
                ('findings', models.TextField(blank=True, help_text='Imaging findings', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the imaging')),
            ],
            options={
                'verbose_name_plural': 'imaging',
                'ordering': ['-date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LabResultsReadModel',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('patient_id', models.UUIDField(help_text='ID of the patient this data belongs to')),
                ('lab_type', models.CharField(help_text='Type of lab test', max_length=50)),
                ('results', models.JSONField(help_text='Lab test results data')),
                ('performed_at', models.DateTimeField(help_text='When the lab test was performed')),
                ('schema_version', models.CharField(default='1.0', help_text='Version of the data schema', max_length=10)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Measurements',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='manual', help_text='Source system or method of data entry', max_length=100)),
                ('date', models.DateField(help_text='Date of the record')),
                ('weight', models.FloatField(help_text='Weight in pounds')),
                ('value', models.FloatField(blank=True, help_text='Additional value measurement', null=True)),
                ('nutritional_intake', models.CharField(help_text='Description of nutritional intake', max_length=200)),
                ('mac', models.CharField(help_text='Mid-arm circumference', max_length=100)),
                ('fast', models.CharField(help_text='Functional Assessment Screening Tool', max_length=100)),
                ('pps', models.CharField(help_text='Palliative Performance Scale', max_length=100)),
                ('plof', models.CharField(help_text='Prior Level of Function', max_length=100)),
            ],
            options={
                'verbose_name_plural': 'measurements',
                'ordering': ['-date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Medications',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='manual', help_text='Source system or method of data entry', max_length=100)),
                ('date', models.DateField(help_text='Date of the record')),
                ('drug', models.CharField(help_text='Name of the medication', max_length=255)),
                ('dose', models.CharField(help_text='Dose of the medication', max_length=100)),
                ('route', models.CharField(help_text='Route of administration', max_length=50)),
                ('frequency', models.CharField(help_text='How often to take the medication', max_length=100)),
                ('date_prescribed', models.DateField(help_text='Date the medication was prescribed')),
                ('dc_date', models.DateField(blank=True, help_text='Date the medication was discontinued', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the medication')),
                ('prn', models.BooleanField(default=False, help_text='Whether this is an as-needed medication')),
            ],
            options={
                'verbose_name_plural': 'medications',
            },
        ),
        migrations.CreateModel(
            name='NoteAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Attached file', upload_to='note_attachments/%Y/%m/%d/')),
                ('filename', models.CharField(help_text='Original filename', max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file_type', models.CharField(help_text='Type of file', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='NoteTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Occurrences',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='manual', help_text='Source system or method of data entry', max_length=100)),
                ('date', models.DateField(help_text='Date of the record')),
                ('occurrence_type', models.CharField(help_text='Type of occurrence', max_length=100)),
                ('description', models.TextField(help_text='Detailed description of the occurrence')),
                ('action_taken', models.TextField(blank=True, help_text='Actions taken in response', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the occurrence')),
            ],
            options={
                'verbose_name_plural': 'occurrences',
                'ordering': ['-date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient_number', models.CharField(help_text='External patient identifier', max_length=50, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('N', 'Prefer not to say')], max_length=1)),
                ('address', models.TextField()),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('emergency_contact', models.TextField()),
                ('insurance_info', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='PatientNote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='manual', help_text='Source system or method of data entry', max_length=100)),
                ('date', models.DateField(help_text='Date of the record')),
                ('title', models.CharField(help_text='Title of the note', max_length=200)),
                ('content', models.TextField(help_text='Note content')),
                ('category', models.CharField(choices=[('OVERVIEW', 'Overview'), ('CLINICAL', 'Clinical Data'), ('VISITS', 'Visits'), ('MEDICATIONS', 'Medications'), ('LABS', 'Lab Results'), ('VITALS', 'Vital Signs'), ('GENERAL', 'General Notes')], default='GENERAL', help_text='Category of note', max_length=20)),
                ('is_pinned', models.BooleanField(default=False, help_text='Whether this note is pinned')),
                ('object_id', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'ordering': ['-is_pinned', '-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientReadModel',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('schema_version', models.CharField(default='1.0', max_length=10)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('current_data', models.JSONField(help_text='Current state of patient data')),
                ('version', models.IntegerField(help_text='Version of the patient data')),
                ('snapshot_data', models.JSONField(help_text='Snapshot of patient data at a point in time', null=True)),
                ('snapshot_version', models.IntegerField(help_text='Version of the snapshot data', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('registration_date', models.DateField(default=datetime.date.today, help_text='Date when provider was registered in the system')),
                ('provider', models.CharField(help_text="Provider's full name", max_length=100)),
                ('practice', models.CharField(help_text='Name of the medical practice', max_length=200)),
                ('address', models.CharField(help_text='Street address', max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(help_text='Two-letter US state code', max_length=2)),
                ('zip_code', models.CharField(help_text='US ZIP code (5 or 9 digits)', max_length=10)),
                ('fax', models.CharField(blank=True, help_text='Format: XXX-XXX-XXXX', max_length=20, null=True)),
                ('phone', models.CharField(help_text='Format: XXX-XXX-XXXX', max_length=20)),
                ('source', models.CharField(blank=True, help_text='Data source system', max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the provider is currently active')),
            ],
        ),
        migrations.CreateModel(
            name='Vitals',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='manual', help_text='Source system or method of data entry', max_length=100)),
                ('date', models.DateField(help_text='Date of the record')),
                ('blood_pressure', models.CharField(max_length=20)),
                ('temperature', models.FloatField()),
                ('spo2', models.FloatField()),
                ('pulse', models.IntegerField()),
                ('respirations', models.IntegerField()),
                ('supp_o2', models.BooleanField(default=False)),
                ('pain', models.IntegerField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient')),
            ],
            options={
                'verbose_name_plural': 'vitals',
                'ordering': ['-date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Visits',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='manual', help_text='Source system or method of data entry', max_length=100)),
                ('date', models.DateField(help_text='Date of the record')),
                ('visit_type', models.CharField(choices=[('OFFICE', 'Office Visit'), ('HOME', 'Home Visit'), ('VIRTUAL', 'Virtual Visit'), ('HOSPITAL', 'Hospital Visit'), ('EMERGENCY', 'Emergency Visit'), ('FOLLOWUP', 'Follow-up Visit')], help_text='Type of visit', max_length=20)),
                ('practice', models.CharField(help_text='Practice/facility where visit occurred', max_length=200)),
                ('chief_complaint', models.TextField(blank=True, help_text='Primary reason for visit', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the visit', null=True)),
                ('follow_up_needed', models.BooleanField(default=False, help_text='Whether follow-up is needed')),
                ('follow_up_date', models.DateField(blank=True, help_text='Recommended follow-up date', null=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient')),
                ('provider', models.ForeignKey(help_text='Provider who conducted the visit', null=True, on_delete=django.db.models.deletion.SET_NULL, to='patient_records.provider')),
            ],
            options={
                'verbose_name': 'Visit',
                'verbose_name_plural': 'Visits',
                'ordering': ['-date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Symptoms',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='manual', help_text='Source system or method of data entry', max_length=100)),
                ('date', models.DateField(help_text='Date of the record')),
                ('symptom', models.CharField(help_text='Primary symptom description', max_length=200)),
                ('severity', models.IntegerField(blank=True, choices=[(1, '1 - Minimal'), (2, '2 - Mild'), (3, '3 - Moderate'), (4, '4 - Severe'), (5, '5 - Very Severe')], help_text='Severity level of symptom', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the symptom', null=True)),
                ('person_reporting', models.CharField(help_text='Person who reported the symptom', max_length=200)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient')),
                ('provider', models.ForeignKey(blank=True, help_text='Healthcare provider associated with this symptom', null=True, on_delete=django.db.models.deletion.SET_NULL, to='patient_records.provider')),
            ],
            options={
                'verbose_name': 'Symptom',
                'verbose_name_plural': 'Symptoms',
                'ordering': ['-date', '-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecordRequestLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(default='manual', help_text='Source system or method of data entry', max_length=100)),
                ('date', models.DateField(help_text='Date of the record')),
                ('request_type', models.CharField(blank=True, help_text='Type of request', max_length=100, null=True)),
                ('purpose', models.TextField(blank=True, help_text='Purpose of the request', null=True)),
                ('records_requested', models.TextField(blank=True, help_text='Description of requested records', null=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient')),
            ],
            options={
                'verbose_name': 'Record Request Log',
                'verbose_name_plural': 'Record Request Logs',
                'ordering': ['-date'],
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='provider',
            index=models.Index(fields=['provider'], name='patient_rec_provide_c1436e_idx'),
        ),
        migrations.AddIndex(
            model_name='provider',
            index=models.Index(fields=['practice'], name='patient_rec_practic_5d2fad_idx'),
        ),
        migrations.AddIndex(
            model_name='provider',
            index=models.Index(fields=['-registration_date'], name='patient_rec_registr_e2c416_idx'),
        ),
        migrations.AddIndex(
            model_name='provider',
            index=models.Index(fields=['state'], name='patient_rec_state_09bc26_idx'),
        ),
        migrations.AddIndex(
            model_name='provider',
            index=models.Index(fields=['is_active'], name='patient_rec_is_acti_9fd158_idx'),
        ),
        migrations.AddConstraint(
            model_name='provider',
            constraint=models.CheckConstraint(check=models.Q(('state__regex', '^[A-Z]{2}$')), name='provider_state_format'),
        ),
        migrations.AddConstraint(
            model_name='provider',
            constraint=models.CheckConstraint(check=models.Q(('zip_code__regex', '^\\d{5}(-\\d{4})?$')), name='provider_zip_format'),
        ),
        migrations.AddConstraint(
            model_name='provider',
            constraint=models.CheckConstraint(check=models.Q(('phone__regex', '^\\d{3}-\\d{3}-\\d{4}$')), name='provider_phone_format'),
        ),
        migrations.AddConstraint(
            model_name='provider',
            constraint=models.CheckConstraint(check=models.Q(('fax__isnull', True), ('fax__regex', '^\\d{3}-\\d{3}-\\d{4}$'), _connector='OR'), name='provider_fax_format'),
        ),
        migrations.AddIndex(
            model_name='patientreadmodel',
            index=models.Index(fields=['last_updated'], name='patient_rec_last_up_7a1e29_idx'),
        ),
        migrations.AddField(
            model_name='patientnote',
            name='content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='patientnote',
            name='created_by',
            field=models.ForeignKey(help_text='User who created the note', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='patientnote',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient'),
        ),
        migrations.AddField(
            model_name='patientnote',
            name='tags',
            field=models.ManyToManyField(blank=True, to='patient_records.notetag'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['patient_number'], name='patient_rec_patient_2e6b46_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['last_name', 'first_name'], name='patient_rec_last_na_fe3823_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['date_of_birth'], name='patient_rec_date_of_ec9b15_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['phone'], name='patient_rec_phone_580719_idx'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=models.Index(fields=['email'], name='patient_rec_email_970dc2_idx'),
        ),
        migrations.AddField(
            model_name='occurrences',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient'),
        ),
        migrations.AddField(
            model_name='noteattachment',
            name='note',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='patient_records.patientnote'),
        ),
        migrations.AddField(
            model_name='medications',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient'),
        ),
        migrations.AddField(
            model_name='medications',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='patient_records.provider'),
        ),
        migrations.AddField(
            model_name='measurements',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient'),
        ),
        migrations.AddIndex(
            model_name='labresultsreadmodel',
            index=models.Index(fields=['last_updated'], name='patient_rec_last_up_8a53e4_idx'),
        ),
        migrations.AddIndex(
            model_name='labresultsreadmodel',
            index=models.Index(fields=['patient_id', 'performed_at'], name='patient_rec_patient_81d391_idx'),
        ),
        migrations.AddIndex(
            model_name='labresultsreadmodel',
            index=models.Index(fields=['lab_type', 'performed_at'], name='patient_rec_lab_typ_30fd39_idx'),
        ),
        migrations.AddField(
            model_name='imaging',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient'),
        ),
        migrations.AddIndex(
            model_name='eventstore',
            index=models.Index(fields=['aggregate_type', 'aggregate_id'], name='patient_rec_aggrega_ac40d7_idx'),
        ),
        migrations.AddIndex(
            model_name='eventstore',
            index=models.Index(fields=['event_type'], name='patient_rec_event_t_62c537_idx'),
        ),
        migrations.AddIndex(
            model_name='eventstore',
            index=models.Index(fields=['timestamp'], name='patient_rec_timesta_cebbb5_idx'),
        ),
        migrations.AddConstraint(
            model_name='eventstore',
            constraint=models.UniqueConstraint(fields=('aggregate_type', 'aggregate_id', 'sequence'), name='unique_event_sequence'),
        ),
        migrations.AddField(
            model_name='diagnosis',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient'),
        ),
        migrations.AddField(
            model_name='diagnosis',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='patient_records.provider'),
        ),
        migrations.AddField(
            model_name='cmplabs',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient'),
        ),
        migrations.AddIndex(
            model_name='clinicalreadmodel',
            index=models.Index(fields=['last_updated'], name='patient_rec_last_up_fe3fe6_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicalreadmodel',
            index=models.Index(fields=['patient_id', 'recorded_at'], name='patient_rec_patient_166cb7_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicalreadmodel',
            index=models.Index(fields=['event_type', 'recorded_at'], name='patient_rec_event_t_33c652_idx'),
        ),
        migrations.AddField(
            model_name='clinicalnote',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient'),
        ),
        migrations.AddField(
            model_name='clinicalnote',
            name='provider',
            field=models.ForeignKey(help_text='Provider who wrote the note', null=True, on_delete=django.db.models.deletion.SET_NULL, to='patient_records.provider'),
        ),
        migrations.AddField(
            model_name='cbclabs',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient'),
        ),
        migrations.AddField(
            model_name='audittrail',
            name='patient',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='patient_records.patient'),
        ),
        migrations.AddField(
            model_name='audittrail',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='adls',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='patient_records.patient'),
        ),
        migrations.AddIndex(
            model_name='vitals',
            index=models.Index(fields=['patient', '-date'], name='patient_rec_patient_291486_idx'),
        ),
        migrations.AddIndex(
            model_name='vitals',
            index=models.Index(fields=['-date'], name='patient_rec_date_193ff5_idx'),
        ),
        migrations.AddIndex(
            model_name='vitals',
            index=models.Index(fields=['blood_pressure'], name='patient_rec_blood_p_495332_idx'),
        ),
        migrations.AddIndex(
            model_name='vitals',
            index=models.Index(fields=['temperature'], name='patient_rec_tempera_b78bd4_idx'),
        ),
        migrations.AddIndex(
            model_name='vitals',
            index=models.Index(fields=['spo2'], name='patient_rec_spo2_74dd4d_idx'),
        ),
        migrations.AddIndex(
            model_name='vitals',
            index=models.Index(fields=['pulse'], name='patient_rec_pulse_b2d40e_idx'),
        ),
        migrations.AddIndex(
            model_name='vitals',
            index=models.Index(fields=['pain'], name='patient_rec_pain_b9f376_idx'),
        ),
        migrations.AddIndex(
            model_name='visits',
            index=models.Index(fields=['patient', '-date'], name='patient_rec_patient_897fe7_idx'),
        ),
        migrations.AddIndex(
            model_name='visits',
            index=models.Index(fields=['-date'], name='patient_rec_date_364d83_idx'),
        ),
        migrations.AddIndex(
            model_name='visits',
            index=models.Index(fields=['visit_type'], name='patient_rec_visit_t_239451_idx'),
        ),
        migrations.AddIndex(
            model_name='visits',
            index=models.Index(fields=['provider'], name='patient_rec_provide_107c1c_idx'),
        ),
        migrations.AddIndex(
            model_name='visits',
            index=models.Index(fields=['practice'], name='patient_rec_practic_156355_idx'),
        ),
        migrations.AddIndex(
            model_name='visits',
            index=models.Index(fields=['follow_up_needed'], name='patient_rec_follow__e3b9b8_idx'),
        ),
        migrations.AddIndex(
            model_name='symptoms',
            index=models.Index(fields=['patient', '-date'], name='patient_rec_patient_b37a93_idx'),
        ),
        migrations.AddIndex(
            model_name='symptoms',
            index=models.Index(fields=['-date'], name='patient_rec_date_980242_idx'),
        ),
        migrations.AddIndex(
            model_name='symptoms',
            index=models.Index(fields=['symptom'], name='patient_rec_symptom_0e1f2a_idx'),
        ),
        migrations.AddIndex(
            model_name='symptoms',
            index=models.Index(fields=['severity'], name='patient_rec_severit_f72bce_idx'),
        ),
        migrations.AddIndex(
            model_name='symptoms',
            index=models.Index(fields=['provider'], name='patient_rec_provide_7b3cac_idx'),
        ),
        migrations.AddIndex(
            model_name='recordrequestlog',
            index=models.Index(fields=['patient', '-date'], name='patient_rec_patient_f00dd4_idx'),
        ),
        migrations.AddIndex(
            model_name='recordrequestlog',
            index=models.Index(fields=['-date'], name='patient_rec_date_f686e5_idx'),
        ),
        migrations.AddIndex(
            model_name='recordrequestlog',
            index=models.Index(fields=['request_type'], name='patient_rec_request_12a02e_idx'),
        ),
        migrations.AddIndex(
            model_name='patientnote',
            index=models.Index(fields=['patient', '-date'], name='patient_rec_patient_789427_idx'),
        ),
        migrations.AddIndex(
            model_name='patientnote',
            index=models.Index(fields=['-date'], name='patient_rec_date_5e2b6a_idx'),
        ),
        migrations.AddIndex(
            model_name='patientnote',
            index=models.Index(fields=['category'], name='patient_rec_categor_532d14_idx'),
        ),
        migrations.AddIndex(
            model_name='patientnote',
            index=models.Index(fields=['created_by'], name='patient_rec_created_3526e7_idx'),
        ),
        migrations.AddIndex(
            model_name='patientnote',
            index=models.Index(fields=['is_pinned'], name='patient_rec_is_pinn_100b60_idx'),
        ),
        migrations.AddIndex(
            model_name='occurrences',
            index=models.Index(fields=['patient', '-date'], name='patient_rec_patient_8362b9_idx'),
        ),
        migrations.AddIndex(
            model_name='occurrences',
            index=models.Index(fields=['-date'], name='patient_rec_date_61bb18_idx'),
        ),
        migrations.AddIndex(
            model_name='occurrences',
            index=models.Index(fields=['occurrence_type'], name='patient_rec_occurre_d5dc3a_idx'),
        ),
        migrations.AddIndex(
            model_name='medications',
            index=models.Index(fields=['drug'], name='patient_rec_drug_1aedf5_idx'),
        ),
        migrations.AddIndex(
            model_name='medications',
            index=models.Index(fields=['provider'], name='patient_rec_provide_1182bb_idx'),
        ),
        migrations.AddIndex(
            model_name='medications',
            index=models.Index(fields=['date_prescribed'], name='patient_rec_date_pr_4642ae_idx'),
        ),
        migrations.AddIndex(
            model_name='medications',
            index=models.Index(fields=['dc_date'], name='patient_rec_dc_date_6f311e_idx'),
        ),
        migrations.AddIndex(
            model_name='measurements',
            index=models.Index(fields=['patient', '-date'], name='patient_rec_patient_8fa075_idx'),
        ),
        migrations.AddIndex(
            model_name='measurements',
            index=models.Index(fields=['-date'], name='patient_rec_date_aeb4d6_idx'),
        ),
        migrations.AddIndex(
            model_name='measurements',
            index=models.Index(fields=['weight'], name='patient_rec_weight_142f1d_idx'),
        ),
        migrations.AddIndex(
            model_name='measurements',
            index=models.Index(fields=['pps'], name='patient_rec_pps_d0783c_idx'),
        ),
        migrations.AddIndex(
            model_name='imaging',
            index=models.Index(fields=['patient', '-date'], name='patient_rec_patient_dcfd0e_idx'),
        ),
        migrations.AddIndex(
            model_name='imaging',
            index=models.Index(fields=['-date'], name='patient_rec_date_a85f57_idx'),
        ),
        migrations.AddIndex(
            model_name='imaging',
            index=models.Index(fields=['type'], name='patient_rec_type_da31fb_idx'),
        ),
        migrations.AddIndex(
            model_name='imaging',
            index=models.Index(fields=['body_part'], name='patient_rec_body_pa_747ebd_idx'),
        ),
        migrations.AddIndex(
            model_name='diagnosis',
            index=models.Index(fields=['icd_code'], name='patient_rec_icd_cod_1a862b_idx'),
        ),
        migrations.AddIndex(
            model_name='diagnosis',
            index=models.Index(fields=['provider'], name='patient_rec_provide_bc2a95_idx'),
        ),
        migrations.AddIndex(
            model_name='diagnosis',
            index=models.Index(fields=['is_active'], name='patient_rec_is_acti_39d8f2_idx'),
        ),
        migrations.AddIndex(
            model_name='cmplabs',
            index=models.Index(fields=['patient', '-date'], name='patient_rec_patient_d6f767_idx'),
        ),
        migrations.AddIndex(
            model_name='cmplabs',
            index=models.Index(fields=['-date'], name='patient_rec_date_daeba3_idx'),
        ),
        migrations.AddIndex(
            model_name='cmplabs',
            index=models.Index(fields=['sodium'], name='patient_rec_sodium_946cd4_idx'),
        ),
        migrations.AddIndex(
            model_name='cmplabs',
            index=models.Index(fields=['potassium'], name='patient_rec_potassi_4d345a_idx'),
        ),
        migrations.AddIndex(
            model_name='cmplabs',
            index=models.Index(fields=['glucose'], name='patient_rec_glucose_827d52_idx'),
        ),
        migrations.AddIndex(
            model_name='cmplabs',
            index=models.Index(fields=['creatinine'], name='patient_rec_creatin_62e596_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicalnote',
            index=models.Index(fields=['patient', '-date'], name='patient_rec_patient_410bd2_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicalnote',
            index=models.Index(fields=['-date'], name='patient_rec_date_13fe87_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicalnote',
            index=models.Index(fields=['provider'], name='patient_rec_provide_944aee_idx'),
        ),
        migrations.AddIndex(
            model_name='clinicalnote',
            index=models.Index(fields=['source'], name='patient_rec_source_8e0786_idx'),
        ),
        migrations.AddIndex(
            model_name='cbclabs',
            index=models.Index(fields=['patient', '-date'], name='patient_rec_patient_f56ea6_idx'),
        ),
        migrations.AddIndex(
            model_name='cbclabs',
            index=models.Index(fields=['-date'], name='patient_rec_date_6a7e05_idx'),
        ),
        migrations.AddIndex(
            model_name='cbclabs',
            index=models.Index(fields=['wbc'], name='patient_rec_wbc_53398b_idx'),
        ),
        migrations.AddIndex(
            model_name='cbclabs',
            index=models.Index(fields=['hemoglobin'], name='patient_rec_hemoglo_b725bd_idx'),
        ),
        migrations.AddIndex(
            model_name='cbclabs',
            index=models.Index(fields=['platelets'], name='patient_rec_platele_910fe3_idx'),
        ),
        migrations.AddIndex(
            model_name='audittrail',
            index=models.Index(fields=['patient'], name='patient_rec_patient_908c18_idx'),
        ),
        migrations.AddIndex(
            model_name='audittrail',
            index=models.Index(fields=['action'], name='patient_rec_action_a17e1b_idx'),
        ),
        migrations.AddIndex(
            model_name='audittrail',
            index=models.Index(fields=['record_type'], name='patient_rec_record__893db4_idx'),
        ),
        migrations.AddIndex(
            model_name='audittrail',
            index=models.Index(fields=['user'], name='patient_rec_user_id_9c0926_idx'),
        ),
        migrations.AddIndex(
            model_name='audittrail',
            index=models.Index(fields=['-timestamp'], name='patient_rec_timesta_cef228_idx'),
        ),
        migrations.AddIndex(
            model_name='adls',
            index=models.Index(fields=['patient', '-date'], name='patient_rec_patient_fd139c_idx'),
        ),
        migrations.AddIndex(
            model_name='adls',
            index=models.Index(fields=['-date'], name='patient_rec_date_b84d10_idx'),
        ),
        migrations.AddIndex(
            model_name='adls',
            index=models.Index(fields=['ambulation'], name='patient_rec_ambulat_b0f7e1_idx'),
        ),
        migrations.AddIndex(
            model_name='adls',
            index=models.Index(fields=['continence'], name='patient_rec_contine_78e87c_idx'),
        ),
        migrations.AddIndex(
            model_name='adls',
            index=models.Index(fields=['feeding'], name='patient_rec_feeding_efb782_idx'),
        ),
    ]
